// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package audiosourcepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioSourceClient is the client API for AudioSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioSourceClient interface {
	ControlChannel(ctx context.Context, opts ...grpc.CallOption) (AudioSource_ControlChannelClient, error)
}

type audioSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioSourceClient(cc grpc.ClientConnInterface) AudioSourceClient {
	return &audioSourceClient{cc}
}

func (c *audioSourceClient) ControlChannel(ctx context.Context, opts ...grpc.CallOption) (AudioSource_ControlChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioSource_ServiceDesc.Streams[0], "/AudioSource/ControlChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioSourceControlChannelClient{stream}
	return x, nil
}

type AudioSource_ControlChannelClient interface {
	Send(*ControlChannelResponse) error
	Recv() (*ControlChannelRequest, error)
	grpc.ClientStream
}

type audioSourceControlChannelClient struct {
	grpc.ClientStream
}

func (x *audioSourceControlChannelClient) Send(m *ControlChannelResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioSourceControlChannelClient) Recv() (*ControlChannelRequest, error) {
	m := new(ControlChannelRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioSourceServer is the server API for AudioSource service.
// All implementations must embed UnimplementedAudioSourceServer
// for forward compatibility
type AudioSourceServer interface {
	ControlChannel(AudioSource_ControlChannelServer) error
	mustEmbedUnimplementedAudioSourceServer()
}

// UnimplementedAudioSourceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioSourceServer struct {
}

func (UnimplementedAudioSourceServer) ControlChannel(AudioSource_ControlChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method ControlChannel not implemented")
}
func (UnimplementedAudioSourceServer) mustEmbedUnimplementedAudioSourceServer() {}

// UnsafeAudioSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioSourceServer will
// result in compilation errors.
type UnsafeAudioSourceServer interface {
	mustEmbedUnimplementedAudioSourceServer()
}

func RegisterAudioSourceServer(s grpc.ServiceRegistrar, srv AudioSourceServer) {
	s.RegisterService(&AudioSource_ServiceDesc, srv)
}

func _AudioSource_ControlChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioSourceServer).ControlChannel(&audioSourceControlChannelServer{stream})
}

type AudioSource_ControlChannelServer interface {
	Send(*ControlChannelRequest) error
	Recv() (*ControlChannelResponse, error)
	grpc.ServerStream
}

type audioSourceControlChannelServer struct {
	grpc.ServerStream
}

func (x *audioSourceControlChannelServer) Send(m *ControlChannelRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioSourceControlChannelServer) Recv() (*ControlChannelResponse, error) {
	m := new(ControlChannelResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioSource_ServiceDesc is the grpc.ServiceDesc for AudioSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AudioSource",
	HandlerType: (*AudioSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlChannel",
			Handler:       _AudioSource_ControlChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "source.proto",
}
